x = read.table("/Volumes/DATA/Tung-Warrior_VitB/denovo_unoise_otus/otutable.txt")
x = read.table("/Volumes/DATA/Tung-Warrior_VitB/denovo_unoise_otus/otutable.txt")
x
View(x)
x = read.table("/Volumes/DATA/Tung-Warrior_VitB/denovo_unoise_otus/otutable.txt",
header=T)
View(x)
colSums(x)
colSums(x)
x
typeof(x)
x[1]
class(x)
x[,1]
?read.table
x = read.table("/Volumes/DATA/Tung-Warrior_VitB/denovo_unoise_otus/otutable.txt",
header=T, stringsAsFactors=F)
colSums(x)
rownames(x) = x[,1]
x
x = read.table("/Volumes/DATA/Tung-Warrior_VitB/denovo_unoise_otus/otutable.txt",
header=T, stringsAsFactors=F)
rownames(x) = x[,1]
y = x[,-1]
x = y
View(x)
colSums(x)
hist(x)
x
x[,1]
x[,2]
x[,3]
x[,4]
hist(matrix(x))
hist(as.matrix(x))
density(as.matrix(x))
plot(density(as.matrix(x)))
plot(density(as.matrix(log10(x))))
plot(density(as.matrix(log10(colSums(x)))))
plot(density(as.matrix(colSums(x))))
plot((as.matrix(colSums(x)))
boxplot(as.matrix(colSums(x)))))
boxplot(as.matrix(colSums(x))))
boxplot(as.matrix(colSums(x)))
boxplot(as.matrix(colSums(log2(x)))
boxplot(as.matrix(colSums(log2(x))))
boxplot(as.matrix(log2(colSums(x))))
colnames(x)
cor(x)
source("https://bioconductor.org/biocLite.R")
install.packages("BiocManager")
BiocManager::install()
as.dist(cor(x))
d = as.dist(cor(x))
View(d)
pheatmap(cor(x))
library(pheatmap)
BiocManager::install("pheatmap")
library(pheatmap)
pheatmap(cor(x))
x[,c(1,2)]
x[,c(1,2)]
colSums(x[,c(1,2)])
plot(x[,c(1,2)])
plot(log2(x[,c(1,2)]))
density(x[,c(1)])
plot(density(x[,c(1)]))
x[,c(1)]
sum(x[,c(1)]>1)
BiocManager::install(c("pheatmap","edgeR"))
library(pheatmap); library(edgeR)
pheatmap(cor(cpm(x,log=T)))
plot(cpm(x[,c(1,2)],log=T))
x
plot(cpm(x[,c(1,"DNAX.Neg.7.27.17")],log=T))
plot(cpm(x[,c("X623","DNAX.Neg.7.27.17")],log=T))
plot(cpm(x[,c("X623","DNAX.Neg.7.27.17")],log=F))
ls
write(colnames(x),file="/Volumes/DATA/Tung-Warrior_VitB/names.txt")
knitr::opts_chunk$set(echo = TRUE)
less(count_matrix)
page(count_matrix_DE)
library(data.table)
count_matrix = fread("WarriorFinal.final.abund.opti_mcc.unique_list.0.03.norm.shared",data.table=F)
count_matrix = count_matrix[order(count_matrix$Group),]
tmp = t(count_matrix[,-(c(1:3))])
colnames(tmp) = count_matrix$Group
count_matrix_DE = as.data.frame(tmp)
page(count_matrix_DE)
tmp = t(count_matrix[,-(c(1:3))])
colnames(tmp) = count_matrix$Group
count_matrix_DE = as.data.frame(tmp)
head(count_matrix_DE)
count_matrix_DE_filtered = count_matrix_DE[rowSums(count_matrix_DE)!=0,]
dim(count_matrix_DE_filtered)
count_matrix_DE_filtered = count_matrix_DE[rowSums(count_matrix_DE)==0,]
dim(count_matrix_DE_filtered)
count_matrix_DE_filtered = count_matrix_DE[rowSums(count_matrix_DE)>5,]
dim(count_matrix_DE_filtered)
count_matrix_DE_filtered = count_matrix_DE[rowSums(count_matrix_DE)>10,]
dim(count_matrix_DE_filtered)
abline(h=1)
barplot(log10(rowSums(count_matrix_DE)))
abline(h=1)
abline(h=1,col="red")
barplot(log10(rowSums(count_matrix_DE)))
abline(h=1,col="red")
cmdf = count_matrix_DE_filtered
cor(cmdf)
pheatmap(cor(cmdf))
library(pheatmap)
pheatmap(cor(cmdf))
colSums(cmdf)
plot(colSums(cmdf))
library(pheatmap)
pheatmap(cor(cmdf,method="pearson"))
pheatmap(cor(cmdf,method="spearman"))
lcdmf = cpm(cdmf,log=T)
library(edgeR)
lcdmf = cpm(cdmf,log=T)
lcdmf = cpm(cmdf,log=T)
lcmdf = cpm(cmdf,log=T)
lcmdf
colSums(lcmdf)
pheatmap(cor(cmdf,method="spearman"))
pheatmap(cor(lcmdf,method="spearman"))
pheatmap(cor(lcmdf,method="pearson"))
pheatmap(cor(lcmdf,method="spearman"))
cmdf
cor(t(cmdf))
cor(t(cmdf[1:700],))
cor(t(cmdf[1:700,]))
pheatmap(cor(t(cmdf[1:200,])))
pheatmap(cor(t(cmdf[1:800,])))
pheatmap(abs(cor(t(cmdf[1:800,]))))
pheatmap(abs(cor(t(cmdf[1:1000,]),method="spearman")))
pheatmap(abs(cor(t(cmdf[1:1000,]),method="pearson")))
pheatmap(abs(cor(t(cmdf[1:1000,]),method="pearson")),annotation_col=rowSums(cmdf))
pheatmap(abs(cor(t(cmdf[1:1000,]),method="pearson")),annotation_col=rowSums(cmdf[1:1000,]))
pheatmap(abs(cor(t(cmdf[1:1000,]),method="pearson")),annotation_col=data.frame(Counts=rowSums(cmdf[1:1000,])))
pheatmap(abs(cor(t(cmdf[1:1000,]),method="pearson")),annotation_col=data.frame(Counts=log10(rowSums(cmdf[1:1000,]))))
View(cor(cmdf)
View(cor(cmdf))
cor(cmdf)
cor(cmdf)
#cor(cmdf)
#looks like sample 2 and 13
View(cmdf)
plot(cmdf[colnames(cmdf)%in%c(2,3)])
plot(cmdf[colnames(cmdf)%in%c(2,13)])
plot(log2(cmdf[colnames(cmdf)%in%c(2,13)]))
nrow(cmdf)
plot(log2(cmdf[colnames(cmdf)%in%c(2,13)]))
contour(log2(cmdf[colnames(cmdf)%in%c(2,13)]))
ggplot(cmdf) +
geom_hex() +
theme_bw()
library(ggplot2)
#BiocManager::install(c("edgeR", "limma","data.table"))
BiocManager::install(c("edgeR", "limma","data.table","ggplot2"))
ggplot(cmdf) +
geom_hex() +
theme_bw()
library(ggplot2)
ggplot(cmdf) +
geom_hex() +
theme_bw()
ggplot(cmdf,aes(colnames(cmdf)%in%c(2,13)])) +
plot(log2(cmdf[colnames(cmdf)%in%c(2,13)]))
plot(log2(cmdf[colnames(cmdf)%in%c(2,13)]),col=rgb(0, 0, 255, max = 255, alpha = 125, names = "blue50"))
plot(log2(cmdf[colnames(cmdf)%in%c(2,13)]),col=rgb(0, 0, 255, max = 255, alpha = 50, names = "blue50"))
length(count_matrix_DE)
apply(count_matrix_DE,1,sum)
apply(count_matrix_DE,1,x>5)
apply(count_matrix_DE,1,>5)
apply(count_matrix_DE,1,function(x){x>5})
cmdf2 = count_matrix_DE
cmdf2 = cmdf2[apply(cmdf2, 1, FUN = function(x) sum(x>= 5)>=2),]
cmdf2 = cmdf2[apply(cmdf2, 1, FUN = function(x) sum(x>= 5)>=40),]
dim(cmdf2)
cmdf2 = cmdf2[apply(cmdf2, 1, FUN = function(x) sum(x>= 5)>=20),]
dim(cmdf2)
cmdf2 = count_matrix_DE
cmdf2 = cmdf2[apply(cmdf2, 1, FUN = function(x) sum(x>= 5)>=20),]
dim(cmdf2)
plot(log2(cmdf2[colnames(cmdf2)%in%c(2,13)]),col=rgb(0, 0, 255, max = 255, alpha = 50, names = "blue50"))
pheatmap(cor(cmdf2,method="pearson"))
pheatmap(cor(cmdf,method="pearson"))
pheatmap(cor(cmdf2,method="spearman"))
pheatmap(abs(cor(cmdf2,method="spearman")))
pheatmap(abs(cor(cmdf2,method="pearson")))
plot(cmdf2[colnames(cmdf2)%in%c(2,13)]),col=rgb(0, 0, 255, max = 255, alpha = 50, names = "blue50")
plot(cmdf2[colnames(cmdf2)%in%c(2,13)]),col=rgb(0, 0, 255, max = 255, alpha = 50, names = "blue50"))
plot(cmdf2[colnames(cmdf2)%in%c(2,13)],col=rgb(0, 0, 255, max = 255, alpha = 50, names = "blue50"))
plot(log10(cmdf2[colnames(cmdf2)%in%c(2,13)]),col=rgb(0, 0, 255, max = 255, alpha = 50, names = "blue50"))
plot(log10(cmdf2[colnames(cmdf2)%in%c(2,1)]),col=rgb(0, 0, 255, max = 255, alpha = 50, names = "blue50"))
plot(log10(cmdf2[colnames(cmdf2)%in%c(2,100)]),col=rgb(0, 0, 255, max = 255, alpha = 50, names = "blue50"))
plot(log10(cmdf2[colnames(cmdf2)%in%c(2,1)]),col=rgb(0, 0, 255, max = 255, alpha = 50, names = "blue50"))
library(BiocManager)
BiocManager::install("rtweet")
library(rtweet)
jkr <- get_favorites("jk_rowling", n = 3000)
jkr <- get_favorites("jk_rowling", n = 3000)
jkr
class(jkr)
jkr[[1]]
jkr[[2]]
jkr[[3]]
jkr[[4]]
library(BiocManager)
BiocManager::install("rtweet")
jkr
jkr <- get_favorites("jk_rowling", n = 3000)
library(rtweet)
jkr <- get_favorites("jk_rowling", n = 3000)
jkr
jkr$text
?get_favorites
jkr$geo_coords
jkr$place_name
jkr$account_created_at
jkr$geo_coords
jkr$geo_coords
jkr$retweet_location
jkr$place_url
jkr$country
jkr$coords_coords
jkr$place_name
jkr$place_full_name
power.t.test
4**5
4^5
wp.logistic
install.packages()
install.packages("WebPower")
wp.logistic
library(WebPower)
wp.logistic
pwr.f2.test
install.packages("pwr")
library(pwr)
pwr.f2.test
# SECTION 3: Logistic Regression and Odds Ratios ####
merged = read.csv("InputData/meta_merged_observed.csv",row.names = 1, check.names = F, stringsAsFactors = 1)
merged$gender = as.factor(recode(merged$gender, `0` = "Male", `1` = "Female"))
merged$gender = fct_relevel(merged$gender, ref = "Male")
#merged$age = recode(merged$age, a = "30-59", c = "<18", y = "18-29", e = "60+")
#merged$age = fct_relevel(merged$age, levels = c("<18", "18-29", "30-59", "60+"))
merged$age = fct_relevel(merged$age, levels = c("c", "y", "a", "e"))
### Setting working directory for Github repo
setwd('~/Documents/GitHub/ProjectSnafu')
# SECTION 3: Logistic Regression and Odds Ratios ####
merged = read.csv("InputData/meta_merged_observed.csv",row.names = 1, check.names = F, stringsAsFactors = 1)
merged$gender = as.factor(recode(merged$gender, `0` = "Male", `1` = "Female"))
merged$gender = fct_relevel(merged$gender, ref = "Male")
### Loading packages
library(ggpubr); library(tidyverse); library(forestplot); library(maps); library(mapdata); library(ggmap); library(tidyverse)
# SECTION 3: Logistic Regression and Odds Ratios ####
merged = read.csv("InputData/meta_merged_observed.csv",row.names = 1, check.names = F, stringsAsFactors = 1)
merged$gender = as.factor(recode(merged$gender, `0` = "Male", `1` = "Female"))
merged$gender = fct_relevel(merged$gender, ref = "Male")
#merged$age = recode(merged$age, a = "30-59", c = "<18", y = "18-29", e = "60+")
#merged$age = fct_relevel(merged$age, levels = c("<18", "18-29", "30-59", "60+"))
merged$age = fct_relevel(merged$age, levels = c("c", "y", "a", "e"))
merged$age = droplevels(merged$age)
# Setting threshold for high case rate vs low case rate
threshold = 800
plot(density(merged$case_rate))
abline(v=threshold,col="red")
test = merged
# merged_nottop5 <- merged %>%
#   filter(!(county %in% c("dane", "brown", "racine", "outagamie", "winnebago")))
model = glm(mask ~ age + avg_zscore_price_index + gender +case_rate*pop_total, data = merged, family = binomial)
summary(model)
# Converting logistic regression coef. into adjusted OR
OR = data.frame(exp(cbind("Odds ratio" = coef(model), confint.default(model, level = 0.95))), pvalue = summary(model)$coefficients[,4], check.names = F)
OR
# Remove the intercept row
abbreviated_1 = OR[-1,1]
abbreviated_2 = OR[-1,2]
abbreviated_3 = OR[-1,3]
abbreviated_4 = OR[-1,4]
OR
